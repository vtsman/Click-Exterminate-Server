#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var fs = require('fs');
 var app = require('../app');
 var debug = require('debug')('untitled:server');
 var net = require('net');
 var http = require('http');
 var https = require('https');

 var baseAddress = 3000;
 var redirectAddress = 3001;
 var httpsAddress = 3002;
 var httpsOptions = {
     key: fs.readFileSync('/Users/Spencer/Documents/cert/server.key'),
     cert: fs.readFileSync('/Users/Spencer/Documents/cert/server.crt'),
 };

 var ns = net.createServer(tcpConnection).listen(baseAddress);
 var hs = http.createServer(app).listen(redirectAddress);
 var ss = https.createServer(httpsOptions, app).listen(httpsAddress);

    function harambe(err) {
        console.error(err.stack);
        console.log("Node NOT Exiting...");
    }

    ns.on('uncaughtException', harambe);
    hs.on('uncaughtException', harambe);
    ss.on('uncaughtException', harambe);

function onError(error) {
    if (error.syscall !== 'listen') {
        //throw error;
    }

    var bind = typeof baseAddress === 'string'
        ? 'Pipe ' + baseAddress
        : 'Port ' + baseAddress;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            //process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            //process.exit(1);
            break;
        //default:
            //throw error;
    }
    console.log("fuck")
}

ns.on('error', onError);
hs.on('error', onError);
ss.on('error', onError);

 function tcpConnection(conn) {
     conn.once('data', function (buf) {
         // A TLS handshake record starts with byte 22.
         var address = (buf[0] === 22) ? httpsAddress : redirectAddress;
         var proxy = net.createConnection(address, function () {
             proxy.write(buf);
             conn.pipe(proxy).pipe(conn);
         });
     });
 }